{"ast":null,"code":"import { cldr, getLocaleInfo } from './info';\nimport { errors } from '../errors';\nimport localeTerritory from './territory';\nimport parseRangeDate from './parse-range-date';\n/* eslint-disable consistent-return */\n\nvar NoCurrency = errors.NoCurrency;\nvar NoCurrencyDisplay = errors.NoCurrencyDisplay;\nvar NoSupplementalCurrency = errors.NoSupplementalCurrency;\nvar NoCurrencyRegion = errors.NoCurrencyRegion;\nvar NoValidCurrency = errors.NoValidCurrency;\nvar DEFAULT_CURRENCY_FRACTIONS = 2;\nvar SYMBOL = \"symbol\";\nvar INVALID_CURRENCY_CODE = 'XXX';\nvar GLOBAL_CURRENCIES = {\n  '001': 'USD',\n  // 001 refers to world. not sure if it is correct to assume USD but seems better than throw an error\n  '150': 'EUR' // 150 territory for Europe\n\n};\n\nfunction getCurrencyInfo(locale, currency, throwIfNoValid) {\n  var info = getLocaleInfo(locale);\n  var currencies = info.numbers.currencies;\n\n  if (!currencies) {\n    if (throwIfNoValid) {\n      throw NoCurrency.error();\n    }\n\n    return;\n  }\n\n  var currencyDisplayInfo = currencies[currency];\n\n  if (!currencyDisplayInfo) {\n    if (throwIfNoValid) {\n      throw NoCurrencyDisplay.error();\n    }\n\n    return;\n  }\n\n  return currencyDisplayInfo;\n}\n\nfunction lengthComparer(a, b) {\n  return b.length - a.length;\n}\n\nfunction regionCurrency(regionCurrencies) {\n  var latestValidUntil, latestValidUntilRange;\n  var latestStillValid, latestStillValidDate;\n\n  for (var idx = 0; idx < regionCurrencies.length; idx++) {\n    var currency = regionCurrencies[idx];\n    var code = Object.keys(currency)[0];\n    var info = currency[code];\n\n    if (code !== INVALID_CURRENCY_CODE && info._tender !== 'false' && info._from) {\n      if (!info._to) {\n        var stillValidDate = parseRangeDate(info._from);\n\n        if (!latestStillValidDate || latestStillValidDate < stillValidDate) {\n          latestStillValid = code;\n          latestStillValidDate = stillValidDate;\n        }\n      } else if (!latestStillValid) {\n        var validFrom = parseRangeDate(info._from);\n        var validTo = parseRangeDate(info._to);\n\n        if (!latestValidUntilRange || latestValidUntilRange.to < validTo || latestValidUntilRange.from < validFrom) {\n          latestValidUntil = code;\n          latestValidUntilRange = {\n            from: validFrom,\n            to: validTo\n          };\n        }\n      }\n    }\n  }\n\n  return latestStillValid || latestValidUntil;\n}\n\nexport function currencyDisplays(locale, currency, throwIfNoValid) {\n  if (throwIfNoValid === void 0) throwIfNoValid = true;\n  var currencyInfo = getCurrencyInfo(locale, currency, throwIfNoValid);\n\n  if (!currencyInfo) {\n    return;\n  }\n\n  if (!currencyInfo.displays) {\n    var displays = [currency];\n\n    for (var field in currencyInfo) {\n      displays.push(currencyInfo[field]);\n    }\n\n    displays.sort(lengthComparer);\n    currencyInfo.displays = displays;\n  }\n\n  return currencyInfo.displays;\n}\nexport function currencyDisplay(locale, options) {\n  var value = options.value;\n  var currency = options.currency;\n  var currencyDisplay = options.currencyDisplay;\n  if (currencyDisplay === void 0) currencyDisplay = SYMBOL;\n\n  if (currencyDisplay === \"code\") {\n    return currency;\n  }\n\n  var currencyInfo = getCurrencyInfo(locale, currency, true);\n  var result;\n\n  if (currencyDisplay === SYMBOL) {\n    result = currencyInfo[\"symbol-alt-narrow\"] || currencyInfo[SYMBOL];\n  } else {\n    if (typeof value === undefined || value !== 1) {\n      result = currencyInfo[\"displayName-count-other\"];\n    } else {\n      result = currencyInfo[\"displayName-count-one\"];\n    }\n  }\n\n  return result;\n}\nexport function currencyFractionOptions(code) {\n  var minimumFractionDigits = DEFAULT_CURRENCY_FRACTIONS;\n  var maximumFractionDigits = DEFAULT_CURRENCY_FRACTIONS;\n  var fractions = ((cldr.supplemental.currencyData || {}).fractions || {})[code];\n\n  if (fractions && fractions._digits) {\n    maximumFractionDigits = minimumFractionDigits = parseInt(fractions._digits, 10);\n  }\n\n  return {\n    minimumFractionDigits: minimumFractionDigits,\n    maximumFractionDigits: maximumFractionDigits\n  };\n}\nexport function territoryCurrencyCode(territory, throwIfNoValid) {\n  if (throwIfNoValid === void 0) throwIfNoValid = true;\n\n  if (GLOBAL_CURRENCIES[territory]) {\n    return GLOBAL_CURRENCIES[territory];\n  }\n\n  var currencyData = cldr.supplemental.currencyData;\n\n  if (!currencyData) {\n    if (throwIfNoValid) {\n      throw NoSupplementalCurrency.error();\n    }\n\n    return;\n  }\n\n  var regionCurrencies = currencyData.region[territory];\n\n  if (!regionCurrencies) {\n    if (throwIfNoValid) {\n      throw NoCurrencyRegion.error(territory);\n    }\n\n    return;\n  }\n\n  var currencyCode = regionCurrency(regionCurrencies);\n  return currencyCode;\n}\nexport function localeCurrency(locale, throwIfNoValid) {\n  var info = getLocaleInfo(locale);\n  var numbers = info.numbers;\n\n  if (!numbers.localeCurrency) {\n    var currency = territoryCurrencyCode(localeTerritory(info), throwIfNoValid);\n\n    if (!currency && throwIfNoValid) {\n      throw NoValidCurrency.error(info.name);\n    }\n\n    numbers.localeCurrency = currency;\n  }\n\n  return numbers.localeCurrency;\n}","map":{"version":3,"sources":["C:/Users/Larsen/Documents/GitHub/GoalieWatch/node_modules/@telerik/kendo-intl/dist/es/cldr/currency.js"],"names":["cldr","getLocaleInfo","errors","localeTerritory","parseRangeDate","NoCurrency","NoCurrencyDisplay","NoSupplementalCurrency","NoCurrencyRegion","NoValidCurrency","DEFAULT_CURRENCY_FRACTIONS","SYMBOL","INVALID_CURRENCY_CODE","GLOBAL_CURRENCIES","getCurrencyInfo","locale","currency","throwIfNoValid","info","currencies","numbers","error","currencyDisplayInfo","lengthComparer","a","b","length","regionCurrency","regionCurrencies","latestValidUntil","latestValidUntilRange","latestStillValid","latestStillValidDate","idx","code","Object","keys","_tender","_from","_to","stillValidDate","validFrom","validTo","to","from","currencyDisplays","currencyInfo","displays","field","push","sort","currencyDisplay","options","value","result","undefined","currencyFractionOptions","minimumFractionDigits","maximumFractionDigits","fractions","supplemental","currencyData","_digits","parseInt","territoryCurrencyCode","territory","region","currencyCode","localeCurrency","name"],"mappings":"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","sourcesContent":["import { cldr, getLocaleInfo } from './info';\r\nimport { errors } from '../errors';\r\nimport localeTerritory from './territory';\r\nimport parseRangeDate from './parse-range-date';\r\n\r\n/* eslint-disable consistent-return */\r\n\r\nvar NoCurrency = errors.NoCurrency;\r\nvar NoCurrencyDisplay = errors.NoCurrencyDisplay;\r\nvar NoSupplementalCurrency = errors.NoSupplementalCurrency;\r\nvar NoCurrencyRegion = errors.NoCurrencyRegion;\r\nvar NoValidCurrency = errors.NoValidCurrency;\r\n\r\nvar DEFAULT_CURRENCY_FRACTIONS = 2;\r\nvar SYMBOL = \"symbol\";\r\nvar INVALID_CURRENCY_CODE = 'XXX';\r\n\r\nvar GLOBAL_CURRENCIES = {\r\n    '001': 'USD', // 001 refers to world. not sure if it is correct to assume USD but seems better than throw an error\r\n    '150': 'EUR' // 150 territory for Europe\r\n\r\n};\r\n\r\nfunction getCurrencyInfo(locale, currency, throwIfNoValid) {\r\n    var info = getLocaleInfo(locale);\r\n    var currencies = info.numbers.currencies;\r\n    if (!currencies) {\r\n        if (throwIfNoValid) {\r\n            throw NoCurrency.error();\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    var currencyDisplayInfo = currencies[currency];\r\n\r\n    if (!currencyDisplayInfo) {\r\n        if (throwIfNoValid) {\r\n            throw NoCurrencyDisplay.error();\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    return currencyDisplayInfo;\r\n}\r\n\r\nfunction lengthComparer(a, b) {\r\n    return b.length - a.length;\r\n}\r\n\r\nfunction regionCurrency(regionCurrencies) {\r\n    var latestValidUntil, latestValidUntilRange;\r\n    var latestStillValid, latestStillValidDate;\r\n\r\n    for (var idx = 0; idx < regionCurrencies.length; idx++) {\r\n        var currency = regionCurrencies[idx];\r\n        var code = Object.keys(currency)[0];\r\n        var info = currency[code];\r\n        if (code !== INVALID_CURRENCY_CODE && info._tender !== 'false' && info._from) {\r\n            if (!info._to) {\r\n                var stillValidDate = parseRangeDate(info._from);\r\n                if (!latestStillValidDate || latestStillValidDate < stillValidDate) {\r\n                    latestStillValid = code;\r\n                    latestStillValidDate = stillValidDate;\r\n                }\r\n            } else if (!latestStillValid) {\r\n                var validFrom = parseRangeDate(info._from);\r\n                var validTo = parseRangeDate(info._to);\r\n                if (!latestValidUntilRange || latestValidUntilRange.to < validTo || latestValidUntilRange.from < validFrom) {\r\n                    latestValidUntil = code;\r\n                    latestValidUntilRange = {\r\n                        from: validFrom,\r\n                        to: validTo\r\n                    };\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return latestStillValid || latestValidUntil;\r\n}\r\n\r\nexport function currencyDisplays(locale, currency, throwIfNoValid) {\r\n    if ( throwIfNoValid === void 0 ) throwIfNoValid = true;\r\n\r\n    var currencyInfo = getCurrencyInfo(locale, currency, throwIfNoValid);\r\n    if (!currencyInfo) {\r\n        return;\r\n    }\r\n\r\n    if (!currencyInfo.displays) {\r\n        var displays = [ currency ];\r\n        for (var field in currencyInfo) {\r\n            displays.push(currencyInfo[field]);\r\n        }\r\n        displays.sort(lengthComparer);\r\n        currencyInfo.displays = displays;\r\n    }\r\n\r\n    return currencyInfo.displays;\r\n}\r\n\r\nexport function currencyDisplay(locale, options) {\r\n    var value = options.value;\r\n    var currency = options.currency;\r\n    var currencyDisplay = options.currencyDisplay; if ( currencyDisplay === void 0 ) currencyDisplay = SYMBOL;\r\n\r\n    if (currencyDisplay === \"code\") {\r\n        return currency;\r\n    }\r\n\r\n    var currencyInfo = getCurrencyInfo(locale, currency, true);\r\n    var result;\r\n\r\n    if (currencyDisplay === SYMBOL) {\r\n        result = currencyInfo[\"symbol-alt-narrow\"] || currencyInfo[SYMBOL];\r\n    } else {\r\n        if (typeof value === undefined || value !== 1) {\r\n            result = currencyInfo[\"displayName-count-other\"];\r\n        } else {\r\n            result = currencyInfo[\"displayName-count-one\"];\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function currencyFractionOptions(code) {\r\n    var minimumFractionDigits = DEFAULT_CURRENCY_FRACTIONS;\r\n    var maximumFractionDigits = DEFAULT_CURRENCY_FRACTIONS;\r\n\r\n    var fractions = ((cldr.supplemental.currencyData || {}).fractions || {})[code];\r\n\r\n    if (fractions && fractions._digits) {\r\n        maximumFractionDigits = minimumFractionDigits = parseInt(fractions._digits, 10);\r\n    }\r\n\r\n    return {\r\n        minimumFractionDigits: minimumFractionDigits,\r\n        maximumFractionDigits: maximumFractionDigits\r\n    };\r\n}\r\n\r\nexport function territoryCurrencyCode(territory, throwIfNoValid) {\r\n    if ( throwIfNoValid === void 0 ) throwIfNoValid = true;\r\n\r\n    if (GLOBAL_CURRENCIES[territory]) {\r\n        return GLOBAL_CURRENCIES[territory];\r\n    }\r\n\r\n    var currencyData = cldr.supplemental.currencyData;\r\n    if (!currencyData) {\r\n        if (throwIfNoValid) {\r\n            throw NoSupplementalCurrency.error();\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    var regionCurrencies = currencyData.region[territory];\r\n\r\n    if (!regionCurrencies) {\r\n        if (throwIfNoValid) {\r\n            throw NoCurrencyRegion.error(territory);\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    var currencyCode = regionCurrency(regionCurrencies);\r\n\r\n    return currencyCode;\r\n}\r\n\r\nexport function localeCurrency(locale, throwIfNoValid) {\r\n    var info = getLocaleInfo(locale);\r\n    var numbers = info.numbers;\r\n\r\n    if (!numbers.localeCurrency) {\r\n        var currency = territoryCurrencyCode(localeTerritory(info), throwIfNoValid);\r\n\r\n        if (!currency && throwIfNoValid) {\r\n            throw NoValidCurrency.error(info.name);\r\n        }\r\n\r\n        numbers.localeCurrency = currency;\r\n    }\r\n\r\n    return numbers.localeCurrency;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}