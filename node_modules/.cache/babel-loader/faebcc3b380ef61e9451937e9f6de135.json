{"ast":null,"code":"import * as coreIntl from '@telerik/kendo-intl'; // tslint:disable:max-line-length\n\n/**\r\n * A service which provides internationalization methods and is bound to a specific locale.\r\n */\n\nvar IntlService =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of the internationalization service.\r\n   *\r\n   * @param locale - The locale that will be used by the internationalization methods.\r\n   */\n  function IntlService(locale) {\n    this.locale = locale;\n\n    if (locale === '' && process.env.NODE_ENV !== 'production') {\n      throw 'Locale should not be empty string';\n    }\n  }\n  /**\r\n   * Formats a string with placeholders such as `Total amount {0:c}`.\r\n   *\r\n   * @param format - The format string.\r\n   * @param values - One or more values to output in the format string placeholders.\r\n   * @return - The formatted string.\r\n   */\n\n\n  IntlService.prototype.format = function (format) {\n    var values = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      values[_i - 1] = arguments[_i];\n    }\n    /* The following code retains backward compatibility with the old API */\n\n\n    if (values.length === 1 && Array.isArray(values[0])) {\n      return coreIntl.format(format, values[0], this.locale);\n    }\n\n    return coreIntl.format(format, values, this.locale);\n  };\n  /**\r\n   * Converts a `Date` object to a string based on the specified format. If no format is provided, the default short date format is used.\r\n   *\r\n   * @param value - The date which will be formatted.\r\n   * @param format - The format string or options.\r\n   * @return - The formatted date.\r\n   */\n\n\n  IntlService.prototype.formatDate = function (value, format) {\n    return coreIntl.formatDate(value, format, this.locale);\n  };\n  /**\r\n   * Converts an object to a string based on the specified format.\r\n   *\r\n   * @param value - The value which will be formatted.\r\n   * @param format - The format to use.\r\n   * @return - The formatted object.\r\n   */\n\n\n  IntlService.prototype.toString = function (value, format) {\n    return coreIntl.toString(value, format, this.locale);\n  };\n  /**\r\n   * Converts a string to a `Number`.\r\n   *\r\n   * @param value - The string which will be parsed.\r\n   * @param format - The format string or options.\r\n   * @return - The parsed number.\r\n   */\n\n\n  IntlService.prototype.parseNumber = function (value, format) {\n    return coreIntl.parseNumber(value, this.locale, format);\n  };\n  /**\r\n   * Converts a string to a `Date` object based on the specified format.\r\n   *\r\n   * @param value - The string which will be converted.\r\n   * @param format - The format strings or options.\r\n   * @return - The parsed date.\r\n   */\n\n\n  IntlService.prototype.parseDate = function (value, format) {\n    return coreIntl.parseDate(value, format, this.locale);\n  };\n  /**\r\n   * Converts a `Number` to a string based on the specified format.\r\n   *\r\n   * @param value - The number which will be formatted.\r\n   * @param format - The format string or options.\r\n   * @return - The formatted number.\r\n   */\n\n\n  IntlService.prototype.formatNumber = function (value, format) {\n    return coreIntl.formatNumber(value, format, this.locale);\n  };\n  /**\r\n   * Returns a localized date field name based on specific `dateFieldName` options.\r\n   *\r\n   * @param options - The detailed configuration for the desired date field name.\r\n   * @returns - The localized date field name from the current locale based on the option.\r\n   */\n\n\n  IntlService.prototype.dateFieldName = function (options) {\n    return coreIntl.dateFieldName(options, this.locale);\n  };\n  /**\r\n   * Returns the day names from the current locale based on the option.\r\n   *\r\n   * @param options - The detailed configuration for the desired date format.\r\n   * @return - The day names from the current locale based on the option.\r\n   */\n\n\n  IntlService.prototype.dateFormatNames = function (options) {\n    return coreIntl.dateFormatNames(this.locale, options);\n  };\n  /**\r\n   * Splits the date format into objects which contain information about each part of the pattern.\r\n   *\r\n   * @param format - The format string or options.\r\n   * @returns - The date format parts.\r\n   */\n\n\n  IntlService.prototype.splitDateFormat = function (format) {\n    return coreIntl.splitDateFormat(format, this.locale);\n  };\n  /**\r\n   * Returns the number symbols from the current locale.\r\n   *\r\n   * @return - The number symbols from the current locale.\r\n   */\n\n\n  IntlService.prototype.numberSymbols = function () {\n    return coreIntl.numberSymbols(this.locale);\n  };\n  /**\r\n   * Returns the first day index, starting from Sunday.\r\n   *\r\n   * @return - The index of the first day of the week (0 == Sunday).\r\n   */\n\n\n  IntlService.prototype.firstDay = function () {\n    return coreIntl.firstDay(this.locale);\n  };\n\n  return IntlService;\n}();\n\nexport { IntlService }; // tslint:enable:max-line-length","map":{"version":3,"sources":["../../../src/Intl/IntlService.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as coreIntl from '@telerik/kendo-intl';\r\n// tslint:disable:max-line-length\r\n/**\r\n * A service which provides internationalization methods and is bound to a specific locale.\r\n */\r\nvar IntlService = /** @class */ (function () {\r\n    /**\r\n     * Creates a new instance of the internationalization service.\r\n     *\r\n     * @param locale - The locale that will be used by the internationalization methods.\r\n     */\r\n    function IntlService(locale) {\r\n        this.locale = locale;\r\n        if (locale === '' && process.env.NODE_ENV !== 'production') {\r\n            throw 'Locale should not be empty string';\r\n        }\r\n    }\r\n    /**\r\n     * Formats a string with placeholders such as `Total amount {0:c}`.\r\n     *\r\n     * @param format - The format string.\r\n     * @param values - One or more values to output in the format string placeholders.\r\n     * @return - The formatted string.\r\n     */\r\n    IntlService.prototype.format = function (format) {\r\n        var values = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            values[_i - 1] = arguments[_i];\r\n        }\r\n        /* The following code retains backward compatibility with the old API */\r\n        if (values.length === 1 && Array.isArray(values[0])) {\r\n            return coreIntl.format(format, values[0], this.locale);\r\n        }\r\n        return coreIntl.format(format, values, this.locale);\r\n    };\r\n    /**\r\n     * Converts a `Date` object to a string based on the specified format. If no format is provided, the default short date format is used.\r\n     *\r\n     * @param value - The date which will be formatted.\r\n     * @param format - The format string or options.\r\n     * @return - The formatted date.\r\n     */\r\n    IntlService.prototype.formatDate = function (value, format) {\r\n        return coreIntl.formatDate(value, format, this.locale);\r\n    };\r\n    /**\r\n     * Converts an object to a string based on the specified format.\r\n     *\r\n     * @param value - The value which will be formatted.\r\n     * @param format - The format to use.\r\n     * @return - The formatted object.\r\n     */\r\n    IntlService.prototype.toString = function (value, format) {\r\n        return coreIntl.toString(value, format, this.locale);\r\n    };\r\n    /**\r\n     * Converts a string to a `Number`.\r\n     *\r\n     * @param value - The string which will be parsed.\r\n     * @param format - The format string or options.\r\n     * @return - The parsed number.\r\n     */\r\n    IntlService.prototype.parseNumber = function (value, format) {\r\n        return coreIntl.parseNumber(value, this.locale, format);\r\n    };\r\n    /**\r\n     * Converts a string to a `Date` object based on the specified format.\r\n     *\r\n     * @param value - The string which will be converted.\r\n     * @param format - The format strings or options.\r\n     * @return - The parsed date.\r\n     */\r\n    IntlService.prototype.parseDate = function (value, format) {\r\n        return coreIntl.parseDate(value, format, this.locale);\r\n    };\r\n    /**\r\n     * Converts a `Number` to a string based on the specified format.\r\n     *\r\n     * @param value - The number which will be formatted.\r\n     * @param format - The format string or options.\r\n     * @return - The formatted number.\r\n     */\r\n    IntlService.prototype.formatNumber = function (value, format) {\r\n        return coreIntl.formatNumber(value, format, this.locale);\r\n    };\r\n    /**\r\n     * Returns a localized date field name based on specific `dateFieldName` options.\r\n     *\r\n     * @param options - The detailed configuration for the desired date field name.\r\n     * @returns - The localized date field name from the current locale based on the option.\r\n     */\r\n    IntlService.prototype.dateFieldName = function (options) {\r\n        return coreIntl.dateFieldName(options, this.locale);\r\n    };\r\n    /**\r\n     * Returns the day names from the current locale based on the option.\r\n     *\r\n     * @param options - The detailed configuration for the desired date format.\r\n     * @return - The day names from the current locale based on the option.\r\n     */\r\n    IntlService.prototype.dateFormatNames = function (options) {\r\n        return coreIntl.dateFormatNames(this.locale, options);\r\n    };\r\n    /**\r\n     * Splits the date format into objects which contain information about each part of the pattern.\r\n     *\r\n     * @param format - The format string or options.\r\n     * @returns - The date format parts.\r\n     */\r\n    IntlService.prototype.splitDateFormat = function (format) {\r\n        return coreIntl.splitDateFormat(format, this.locale);\r\n    };\r\n    /**\r\n     * Returns the number symbols from the current locale.\r\n     *\r\n     * @return - The number symbols from the current locale.\r\n     */\r\n    IntlService.prototype.numberSymbols = function () {\r\n        return coreIntl.numberSymbols(this.locale);\r\n    };\r\n    /**\r\n     * Returns the first day index, starting from Sunday.\r\n     *\r\n     * @return - The index of the first day of the week (0 == Sunday).\r\n     */\r\n    IntlService.prototype.firstDay = function () {\r\n        return coreIntl.firstDay(this.locale);\r\n    };\r\n    return IntlService;\r\n}());\r\nexport { IntlService };\r\n// tslint:enable:max-line-length\r\n//# sourceMappingURL=IntlService.js.map"]},"metadata":{},"sourceType":"module"}