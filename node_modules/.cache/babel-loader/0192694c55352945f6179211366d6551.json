{"ast":null,"code":"/**\r\n * @hidden\r\n * Dispatches a new event based on an event that was already internally dispatched to KendoReact users.\r\n *\r\n * @param eventHandler - The public event handler that is assigned by the user.\r\n * When undefined, the method is not an option.\r\n * @param dispatchedEvent - The event that was already dispatched internally.\r\n * @param target - The target component of the new event.\r\n * @param eventData - The additional data that will be passed through the new event.\r\n * When the new event has no additional data\r\n *  other than the `BaseEvent` arguments, pass `undefined`.\r\n */\nexport default function dispatchEvent(eventHandler, dispatchedEvent, target, eventData) {\n  if (eventHandler) {\n    var eventBaseData = {\n      syntheticEvent: dispatchedEvent,\n      nativeEvent: dispatchedEvent.nativeEvent,\n      target: target\n    };\n    eventHandler.call(undefined, Object.assign(eventBaseData, eventData));\n  }\n}","map":{"version":3,"sources":["../../../src/events/dispatchEvent.ts"],"names":[],"mappings":"AAEA;;;;;;;;;;;;AAYA,eAAc,SAAU,aAAV,CACV,YADU,EAEV,eAFU,EAGV,MAHU,EAIV,SAJU,EAK4E;AAEtF,MAAI,YAAJ,EAAkB;AACd,QAAM,aAAa,GAAG;AAClB,MAAA,cAAc,EAAE,eADE;AAElB,MAAA,WAAW,EAAE,eAAe,CAAC,WAFX;AAGlB,MAAA,MAAM,EAAA;AAHY,KAAtB;AAMA,IAAA,YAAY,CAAC,IAAb,CAAkB,SAAlB,EAA6B,MAAM,CAAC,MAAP,CAAc,aAAd,EAA6B,SAA7B,CAA7B;AACH;AACJ","sourceRoot":"","sourcesContent":["/**\r\n * @hidden\r\n * Dispatches a new event based on an event that was already internally dispatched to KendoReact users.\r\n *\r\n * @param eventHandler - The public event handler that is assigned by the user.\r\n * When undefined, the method is not an option.\r\n * @param dispatchedEvent - The event that was already dispatched internally.\r\n * @param target - The target component of the new event.\r\n * @param eventData - The additional data that will be passed through the new event.\r\n * When the new event has no additional data\r\n *  other than the `BaseEvent` arguments, pass `undefined`.\r\n */\r\nexport default function dispatchEvent(eventHandler, dispatchedEvent, target, eventData) {\r\n    if (eventHandler) {\r\n        var eventBaseData = {\r\n            syntheticEvent: dispatchedEvent,\r\n            nativeEvent: dispatchedEvent.nativeEvent,\r\n            target: target\r\n        };\r\n        eventHandler.call(undefined, Object.assign(eventBaseData, eventData));\r\n    }\r\n}\r\n//# sourceMappingURL=dispatchEvent.js.map"]},"metadata":{},"sourceType":"module"}