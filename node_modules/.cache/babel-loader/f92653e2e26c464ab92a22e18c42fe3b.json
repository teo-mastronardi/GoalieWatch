{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { LocalizationService } from './LocalizationService';\nimport { LocalizationContext } from './LocalizationContext'; // tslint:disable:max-line-length\n\n/**\r\n * A React component which provides a localization service. Expects a language string as a property of the component.\r\n */\n\nvar LocalizationProvider =\n/** @class */\nfunction (_super) {\n  __extends(LocalizationProvider, _super);\n\n  function LocalizationProvider() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * Returns a localization service. The method is suitable for overriding when you implement custom localization behavior.\r\n   */\n\n\n  LocalizationProvider.prototype.getLocalizationService = function () {\n    return new LocalizationService(this.props.language);\n  };\n  /**\r\n   * @hidden\r\n   */\n\n\n  LocalizationProvider.prototype.getChildContext = function () {\n    return {\n      kendoLocalizationService: this.getLocalizationService()\n    };\n  };\n  /**\r\n   * @hidden\r\n   */\n\n\n  LocalizationProvider.prototype.render = function () {\n    return React.createElement(LocalizationContext.Provider, {\n      value: this.getLocalizationService()\n    }, React.Children.only(this.props.children));\n  };\n  /**\r\n   * @hidden\r\n   */\n\n\n  LocalizationProvider.propTypes = {\n    language: PropTypes.string\n  };\n  /**\r\n   * @hidden\r\n   */\n\n  LocalizationProvider.childContextTypes = {\n    kendoLocalizationService: PropTypes.object\n  };\n  return LocalizationProvider;\n}(React.Component);\n\nexport { LocalizationProvider }; // tslint:enable:max-line-length","map":{"version":3,"sources":["../../../src/Localization/LocalizationProvider.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAK,SAAZ,MAA2B,YAA3B;AAGA,SAAS,mBAAT,QAAoC,uBAApC;AACA,SAAS,mBAAT,QAAoC,uBAApC,C,CAEA;;AACA;;;;AAGA,IAAA,oBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA0C,EAAA,SAAA,CAAA,oBAAA,EAAA,MAAA,CAAA;;AAA1C,WAAA,oBAAA,GAAA;;AAyCC;AA1BG;;;;;AAGA,EAAA,oBAAA,CAAA,SAAA,CAAA,sBAAA,GAAA,YAAA;AACI,WAAO,IAAI,mBAAJ,CAAwB,KAAK,KAAL,CAAW,QAAnC,CAAP;AACH,GAFD;AAIA;;;;;AAGA,EAAA,oBAAA,CAAA,SAAA,CAAA,eAAA,GAAA,YAAA;AACI,WAAO;AACH,MAAA,wBAAwB,EAAE,KAAK,sBAAL;AADvB,KAAP;AAGH,GAJD;AAMA;;;;;AAGA,EAAA,oBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACI,WACI,KAAA,CAAA,aAAA,CAAC,mBAAmB,CAAC,QAArB,EAA6B;AAAC,MAAA,KAAK,EAAE,KAAK,sBAAL;AAAR,KAA7B,EACK,KAAK,CAAC,QAAN,CAAe,IAAf,CAAoB,KAAK,KAAL,CAAW,QAA/B,CADL,CADJ;AAKH,GAND;AAjCA;;;;;AAGO,EAAA,oBAAA,CAAA,SAAA,GAAY;AACf,IAAA,QAAQ,EAAE,SAAS,CAAC;AADL,GAAZ;AAIP;;;;AAGO,EAAA,oBAAA,CAAA,iBAAA,GAAoB;AACvB,IAAA,wBAAwB,EAAE,SAAS,CAAC;AADb,GAApB;AA8BX,SAAA,oBAAA;AAAC,CAzCD,CAA0C,KAAK,CAAC,SAAhD,CAAA;;SAAa,oB,IA0Cb","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport * as React from 'react';\r\nimport * as PropTypes from 'prop-types';\r\nimport { LocalizationService } from './LocalizationService';\r\nimport { LocalizationContext } from './LocalizationContext';\r\n// tslint:disable:max-line-length\r\n/**\r\n * A React component which provides a localization service. Expects a language string as a property of the component.\r\n */\r\nvar LocalizationProvider = /** @class */ (function (_super) {\r\n    __extends(LocalizationProvider, _super);\r\n    function LocalizationProvider() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * Returns a localization service. The method is suitable for overriding when you implement custom localization behavior.\r\n     */\r\n    LocalizationProvider.prototype.getLocalizationService = function () {\r\n        return new LocalizationService(this.props.language);\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    LocalizationProvider.prototype.getChildContext = function () {\r\n        return {\r\n            kendoLocalizationService: this.getLocalizationService()\r\n        };\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    LocalizationProvider.prototype.render = function () {\r\n        return (React.createElement(LocalizationContext.Provider, { value: this.getLocalizationService() }, React.Children.only(this.props.children)));\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    LocalizationProvider.propTypes = {\r\n        language: PropTypes.string\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    LocalizationProvider.childContextTypes = {\r\n        kendoLocalizationService: PropTypes.object\r\n    };\r\n    return LocalizationProvider;\r\n}(React.Component));\r\nexport { LocalizationProvider };\r\n// tslint:enable:max-line-length\r\n//# sourceMappingURL=LocalizationProvider.js.map"]},"metadata":{},"sourceType":"module"}